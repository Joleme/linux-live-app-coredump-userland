.TH PCOREDUMP "1" "Sep 2007" "pcoredump 0.1.2" "User Commands"
.SH NAME
pcoredump \- take a core dump of a running program without terminating it

.SH SYNOPSIS
.B pcoredump
.RB [ \-f | \-\-force\-limit=
.IR LIMIT ]
.RB [ \-i | \-\-io\-prio=
.IR IOPRIO ]
.RB [ \-s | \-\-sched\-prio=
.IR PRIO ]
.RB [ \-o | \-\-oom\-adjustment=
.IR ADJ ]
PID [\fIPID...\fR]

.SH DESCRIPTION
.PP
Take a "live" core dump from the process specified by PID.  The whole
process, including all of it's threads, will be stopped and cloned.
Then, it's VM will be copied to the clone. Finally, the original
process will be started again from the point where it was stopped, and
the clone process will dump core and exit.  The resulting core dump
file will have the same structure as the core file generated by the
normal mechanism (for example, due to handling SIGSEGV), so gdb(1) may
be used to analyze it.
.PP
Running with no OPTION and PID, pcoredump outputs help text and
exits.  The following options are supported:

.TP
\fB\-f LIMIT\fR, \fB\-\-force-limit=LIMIT\fR
Force the file size limit for the core dump being produced. The syntax
of LIMIT is similar to ulimit(1) builtin of bash(1), i.e. LIMIT must
be in bytes or "unlimited", which means no limit. The number of bytes must
be greater than 0. The CAP_SYS_RESOURCE capability is required to
force the limit; otherwise, the value of LIMIT will be silently
ignored.

.TP
\fB\-i PRIO\fR, \fB\-\-io-prio=PRIO\fR
Set the I/O priority for the clone process. PRIO must be from 0 to 7,
just as for the ionice(1) command.  Changing I/O scheduling class is not
supported.

.TP
\fB\-o ADJ\fR, \fB\-\-oom-adjustment=ADJ\fR
Set the out-of-memory killer adjustment of the clone process. The
value of ADJ must be from OOM_DISABLE to OOM_ADJUST_MAX (see
include/linux/oom.h to see numerical values). The value of ADJ
specifies the likeliness of this process being killed if the system
runs out of memory.

.TP
\fB\-s PRIO\fR, \fB\-\-sched-prio=PRIO\fR
Set scheduling niceness of clone process. Value of PRIO must be from
-20 to 19, and the meaning of this value is the same as for nice(1)
command.

.TP
\fB PID\fR
The process of which to take the core dump.  If more than one PID is
specified, a core dump of each process is taken in sequence.

.PP
By default, the clone process will be created with an ultra-low
priority values and core file size limit will be inherited from the
process being dumped. Core file will be created as specified by the
pattern in /proc/sys/kernel/core_pattern.  The current directory of
the dumped process is used, which is often "/" for daemons.

.PP
It's impossible to take a live core dump of a kernel thread, take a
live coredump of a process which is exiting (performing an exit(3)
call) or handling a fatal signal, or from the process which is already
doing another "live" core dump.  Only one live coredump may be running
at a time in the system; other live coredumps will be blocked until
the running one is completed.

.SH AUTHOR
The pcoredump utility and initial version of this manual page is written
by Dmitry Antipov <antipov@ru.mvista.com>, and Corey Minyard
<cminyard@mvista.com> has make this page even better (and more readable).

.SH "REPORTING BUGS"
Report bugs to <source@mvista.com>.

.SH "SEE ALSO"
.BR nice(1),
.BR ionice(1),
.BR gdb(1),
.BR ulimit(1)

.SH COPYRIGHT
Copyright \(co 2007 Montavista Software, Inc.
